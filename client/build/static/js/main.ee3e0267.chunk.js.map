{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","UPDATE_CATEGORIES","ProductItem","item","image","price","quantity","dispatch","useDispatch","cart","useSelector","state","className","to","alt","src","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","cartOpen","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee3e0267.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n    const {\n        image,\n        name,\n        _id,\n        price,\n        quantity\n    } = item;\n\n    const dispatch = useDispatch();\n    const cart = useSelector(state => state.cart);\n\n    const addToCart = () => {\n        const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n        if (itemInCart) {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: _id,\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n            });\n\n            idbPromise('cart', 'put' , {\n                ...itemInCart,\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n            })\n        } else {\n            dispatch({\n                type: ADD_TO_CART,\n                product: { ...item, purchaseQuantity: 1 }\n            })\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n        }\n    };\n\n    return (\n        <div className='card px-1 py-1'>\n        <Link to={`/products/${_id}`}>\n            <img\n            alt={name}\n            src={`/images/${image}`}\n            />\n            <p>{name}</p>\n        </Link>\n        <div>\n            <div>{quantity} {pluralize('item', quantity)} in stock</div>\n            <span>${price}</span>\n        </div>\n        <button onClick={addToCart}>Add to cart</button>\n        </div>\n    );\n}\n\nexport default ProductItem;","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif'\n\nfunction ProductList() {\n    const dispatch = useDispatch();\n    const state = useSelector(state => state);\n\n    const { currentCategory } = state;\n    const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: UPDATE_PRODUCTS,\n                products: data.products\n            });\n\n            // save to indexedDB\n            data.products.forEach(product => {\n                idbPromise('products', 'put', product);\n            });\n        } else if (!loading) {\n            idbPromise('products', 'get').then(products => {\n                dispatch({\n                    type: UPDATE_PRODUCTS,\n                    products: products\n                })\n            })\n        }\n    }, [data, loading, dispatch]);\n\n    function filterProducts() {\n        if (!currentCategory) {\n            return state.products;\n        }\n\n        return state.products.filter(product => product.category._id === currentCategory);\n    };\n\n    return (\n        <div className='my-2'>\n            <h2>Our Products:</h2>\n            {state.products.length ? (\n                <div className='flex-row'>\n                    {filterProducts().map(product => (\n                        <ProductItem\n                        key= {product._id}\n                        _id={product._id}\n                        image={product.image}\n                        name={product.name}\n                        price={product.price}\n                        quantity={product.quantity}\n                        />\n                    ))}\n                </div>\n            ) : (\n                <h3>You haven't added any products yet!</h3>\n            )}\n            { loading ? \n            <img src={spinner} alt='loading' />: null}\n        </div>\n    );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n    const dispatch = useDispatch();\n    const categories = useSelector(state => state.categories);\n    const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n    useEffect(() => {\n        if (categoryData) {\n            dispatch({ \n                type: UPDATE_CATEGORIES,\n                categories: categoryData.categories\n            });\n\n            categoryData.categories.forEach(category => { \n                idbPromise('categories', 'put', category);\n            });\n        } else if (!loading) {\n            idbPromise('categories', 'get').then(categories => {\n                dispatch({ \n                    type: UPDATE_CATEGORIES,\n                    categories: categories\n                });\n            });\n        }\n    }, [categoryData, loading, dispatch]);\n\n    const handleClick = id => {\n        dispatch({\n            type: UPDATE_CURRENT_CATEGORY,\n            currentCategory: id\n        });\n    };\n\n    return (\n        <div>\n            <h2>Choose a Category:</h2>\n                {categories.map(item => (\n                    <button\n                        key={item._id}\n                        onClick={() => {\n                            handleClick(item._id);\n                        }}\n                    >\n                        {item.name}\n                    </button>\n            ))}\n        </div>\n    );\n}\n\nexport default CategoryMenu;","//imports\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({ \n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n\n        idbPromise('cart', 'delete', { ...item });\n    };\n\n    const onChange = e => {\n        const value = e.target.value;\n        \n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n\n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img src={`/images/${item.image}`} alt=\"\" />\n            </div>\n            <div>{item.name}, ${item.price}</div>\n            <div>\n                <span>Qty:</span>\n                <input type=\"number\" placeholder=\"1\" value={item.purchaseQuantity} onChange={onChange} />\n                <span role=\"img\" aria-label=\"trash\" onClick={() => removeFromCart(item)}>\n                    🗑️\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","//imports\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(state => state.cart);\n    const cartOpen = useSelector(state => state.cartOpen);\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({\n                type: ADD_MULTIPLE_TO_CART,\n                products: [...cart]\n            });\n        };\n\n        if (!cart.length) {\n            getCart();\n        }\n    }, [cart.length, dispatch]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    };\n\n    useEffect(() => {\n        if (data) {\n            stripePromise.then(res => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]\n    );\n\n    function calculateTotal() {\n        let sum = 0;\n        cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    };\n\n    function submitCheckout() {\n        const productIds = [];\n\n        cart.forEach(item => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    };\n\n    if (!cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span role=\"img\" aria-label=\"cart\">🛒</span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            <div>\n                {cart.length ? (\n                    <div>\n                        {cart.map(item => (\n                            <CartItem key={item._id} item={item} />\n                        ))}\n                        <div className=\"flex-row space-between\">\n                            <strong>Total: ${calculateTotal()}</strong>\n                            {\n                                Auth.loggedIn() ?\n                                    <button onClick={submitCheckout}>\n                                        Checkout\n                                    </button>\n                                    :\n                                    <span>(log in to check out)</span>\n                            }\n                        </div>\n                    </div>\n                ) : (\n                    <h3>\n                        <span role=\"img\" aria-label=\"shocked\">\n                            😱\n                        </span>\n                        You haven't added anything to your cart yet!\n                    </h3>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","//imports\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport {\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    ADD_TO_CART,\n    UPDATE_PRODUCTS\n} from '../utils/actions';\n\nimport Cart from '../components/Cart';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n    const dispatch = useDispatch();\n    const products = useSelector(state => state.products);\n    const cart = useSelector(state => state.cart);\n    const { id } = useParams();\n\n    const [currentProduct, setCurrentProduct] = useState({});\n    const { loading, data } = useQuery(QUERY_PRODUCTS);\n    \n    useEffect(() => {\n        if (products.length) {\n            setCurrentProduct(products.find(product => product._id === id));\n        \n        } else if (data) {\n            dispatch({\n                type: UPDATE_PRODUCTS,\n                products: data.products\n            });\n        \n            data.products.forEach((product) => {\n                idbPromise('products', 'put', product);\n            });\n\n        } else if (!loading) {\n            idbPromise('products', 'get').then((indexedProducts) => {\n                dispatch({\n                type: UPDATE_PRODUCTS,\n                products: indexedProducts\n                });\n            });\n        }\n    }, [products, data, loading, dispatch, id]);\n\n    const addToCart = () => {\n        const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n        if (itemInCart) {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: id,\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n            });\n\n            idbPromise('cart', 'put', {\n                ...itemInCart,\n                purchaseQuantity:parseInt(itemInCart.purchaseQuantity) + 1\n            });\n        } else {\n            dispatch({\n                type: ADD_TO_CART,\n                product: { ...currentProduct, purchaseQuantity: 1 }\n            });\n\n            idbPromise('cart', 'pub', { ...currentProduct, purchaseQuantity: 1 });\n        }\n    };\n\n    const removeFromCart = () => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: currentProduct._id\n        });\n\n        idbPromise('cart', 'delete', { ...currentProduct });\n    };\n\n    return (\n        <>\n            {currentProduct ? (\n                <div className='container my-1'>\n                    <Link to='/'>\n                        ← Back to Products\n                    </Link>\n\n                    <h2>{currentProduct.name}</h2>\n\n                    <p>\n                        {currentProduct.description}\n                    </p>\n\n                    <p>\n                        <strong>Price:</strong>\n                        ${currentProduct.price}\n                        {' '}\n                        <button onClick={addToCart}>\n                        Add to Cart\n                        </button>\n                        <button disabled={!cart.find(p => p._id === currentProduct._id)} onClick={removeFromCart}>\n                        Remove from Cart\n                        </button>\n                    </p>\n\n                    <img\n                        src={`/images/${currentProduct.image}`}\n                        alt={currentProduct.name}\n                    />\n                </div>\n            ) : null}\n            {\n                loading ? <img src={spinner} alt='loading' /> : null\n            }\n            <Cart />\n        </>\n    );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}